generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id          Int              @id @default(autoincrement())
  code        Int              @unique
  name        String           @unique
  description String?
  role        RolePermission[]
}

model Role {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  description     String?
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  RoleDailySalary RoleDailySalary[]
  permission      RolePermission[]
  Staff           Staff[]
  users           User[]
}

model RolePermission {
  role_id       Int
  permission_id Int
  permissions   Permission @relation(fields: [permission_id], references: [id])
  role          Role       @relation(fields: [role_id], references: [id])

  @@id([role_id, permission_id])
}

model School {
  id            Int    @id @default(autoincrement())
  name          String
  address       String
  contact_phone String
  contact_email String
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id               String    @id @default(uuid())
  first_name       String
  last_name        String
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  password         String
  role_id          Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  accounts         Account[]
  logins           Login[]   @relation("UserLogins")
  messagesReceived Message[] @relation("ReceivedMessages")
  sessions         Session[]
  role             Role      @relation(fields: [role_id], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Login {
  id         Int      @id @default(autoincrement())
  user_id    String
  login_time DateTime
  ip_address String
  user       User     @relation("UserLogins", fields: [user_id], references: [id])
}

model Department {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  courses     Course[]
  staff       Staff[]
  Teacher     Teacher[]
}

model LevelStudy {
  id          Int       @id @default(autoincrement())
  designation String    @unique
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  classes     Class[]
  students    Student[]
}

model Course {
  id            Int        @id @default(autoincrement())
  name          String
  description   String?
  credits       Int
  department_id Int
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  classes       Class[]
  department    Department @relation(fields: [department_id], references: [id])
  grades        Grade[]
  schedules     Schedule[]
}

model ContractType {
  id          Int      @id @default(autoincrement())
  libelle     String   @unique
  description String?
  duration    Int?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  Staff       Staff[]
}

model Staff {
  id              Int               @id @default(autoincrement())
  matricule       String            @unique
  first_name      String
  last_name       String
  dob             DateTime
  gender          String
  address         String
  phone           String
  email           String
  role_id         Int
  contract_id     Int
  hire_at         DateTime
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  departmentId    Int?
  Class           Class[]
  messagesSent    Message[]         @relation("SentMessages")
  salaries        Salary[]
  schedules       Schedule[]
  contract        ContractType      @relation(fields: [contract_id], references: [id])
  Department      Department?       @relation(fields: [departmentId], references: [id])
  role            Role              @relation(fields: [role_id], references: [id])
  staffAttendance StaffAttendance[]
  Teacher         Teacher[]
}

model Teacher {
  id            Int        @id @default(autoincrement())
  department_id Int
  staff_id      Int
  classes       Class[]
  department    Department @relation(fields: [department_id], references: [id])
  staff         Staff      @relation(fields: [staff_id], references: [id])
}

model Class {
  id            Int        @id @default(autoincrement())
  name          String
  levelStudy_id Int
  course_id     Int
  teacher_id    Int
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  teacherId     Int?
  course        Course     @relation(fields: [course_id], references: [id])
  levelStudy    LevelStudy @relation(fields: [levelStudy_id], references: [id])
  Teacher       Teacher?   @relation(fields: [teacherId], references: [id])
  teacher       Staff      @relation(fields: [teacher_id], references: [id])
  schedules     Schedule[]
}

model Student {
  id             Int                         @id @default(autoincrement())
  matricule      String                      @unique
  first_name     String
  last_name      String
  dob            DateTime
  pob            String
  gender         String
  address        String
  phone          String
  email          String
  levelStudy_id  Int
  picture        String?
  created_at     DateTime                    @default(now())
  updated_at     DateTime                    @updatedAt
  grades         Grade[]
  parentStudents ParentStudentRelationship[]
  levelStudy     LevelStudy                  @relation(fields: [levelStudy_id], references: [id])
  tuitionFees    TuitionFee[]
}

model Grade {
  id            Int      @id @default(autoincrement())
  student_id    Int
  course_id     Int
  grade         Int
  observation   String
  semester      Int
  academic_year String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  course        Course   @relation(fields: [course_id], references: [id])
  student       Student  @relation(fields: [student_id], references: [id])
}

model Message {
  id          Int      @id @default(autoincrement())
  sender_id   Int
  receiver_id String
  message     String
  timestamp   DateTime @default(now())
  file        String?
  receiver    User     @relation("ReceivedMessages", fields: [receiver_id], references: [id])
  sender      Staff    @relation("SentMessages", fields: [sender_id], references: [id])
}

model Parent {
  id             Int                         @id @default(autoincrement())
  name           String
  phone          String
  email          String
  created_at     DateTime                    @default(now())
  updated_at     DateTime                    @updatedAt
  parentStudents ParentStudentRelationship[]
}

model ParentStudentRelationship {
  id         Int     @id @default(autoincrement())
  student_id Int
  parent_id  Int
  parent     Parent  @relation(fields: [parent_id], references: [id])
  student    Student @relation(fields: [student_id], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  duration    Int?     @default(1)
  location    String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Supply {
  id            Int      @id @default(autoincrement())
  name          String
  quantity      Int
  description   String?
  purchase_date DateTime
  cost          Decimal  @db.Decimal(10, 2)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Schedule {
  id         Int      @id @default(autoincrement())
  class_id   Int
  course_id  Int
  teacher_id Int
  dayOfWeek  String
  startTime  DateTime
  endTime    DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  class      Class    @relation(fields: [class_id], references: [id])
  course     Course   @relation(fields: [course_id], references: [id])
  teacher    Staff    @relation(fields: [teacher_id], references: [id])
}

model StaffAttendance {
  id         Int      @id @default(autoincrement())
  staff_id   Int
  date       DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  staff      Staff    @relation(fields: [staff_id], references: [id])
}

model Salary {
  id         Int      @id @default(autoincrement())
  staff_id   Int
  amount     Decimal  @db.Decimal(10, 2)
  month      String
  year       Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  staff      Staff    @relation(fields: [staff_id], references: [id])
}

model RoleDailySalary {
  id           Int      @id @default(autoincrement())
  role_id      Int
  daily_salary Decimal  @db.Decimal(10, 2)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  role         Role     @relation(fields: [role_id], references: [id])
}

model TuitionFee {
  id           Int      @id @default(autoincrement())
  student_id   Int
  amount       Decimal  @db.Decimal(10, 2)
  payment_date DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  student      Student  @relation(fields: [student_id], references: [id])
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  repeat      Int?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}
