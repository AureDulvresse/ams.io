generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//==================== ÉNUMÉRATIONS ====================//
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  ARCHIVED
}

enum StudentStatus {
  ACTIVE
  GRADUATED
  SUSPENDED
  WITHDRAWN
  TRANSFERRED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  MOBILE_MONEY
  CREDIT_CARD
  CHECK
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum DepartmentType {
  ACADEMIC
  ADMINISTRATIVE
  SERVICE
}

enum StaffContractType {
  PERMANENT
  TEMPORARY
  PART_TIME
  VISITING
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum CourseStatus {
  ACTIVE
  ARCHIVED
  DRAFT
  DISCONTINUED
}

enum GradeStatus {
  PASSED
  FAILED
  INCOMPLETE
  WITHDRAWN
}

//==================== GESTION DES ACCÈS (Application uniquement) ====================//
model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  code        String           @unique
  description String?
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  roles       RolePermission[]

  @@map("permissions")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  users       User[]
  permissions RolePermission[]

  @@map("roles")
}

model RolePermission {
  role_id       Int
  permission_id Int
  role          Role       @relation(fields: [role_id], references: [id])
  permission    Permission @relation(fields: [permission_id], references: [id])

  @@id([role_id, permission_id])
  @@map("role_permissions")
}

//==================== UTILISATEURS DE L'APPLICATION ====================//
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String         @id @default(cuid())
  email            String         @unique
  password         String
  first_name       String
  last_name        String
  role_id          Int
  email_verified   DateTime?
  status           UserStatus     @default(ACTIVE)
  last_login       DateTime?
  image            String?
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  deleted_at       DateTime?      @map("deleted_at") // Soft delete
  role             Role           @relation(fields: [role_id], references: [id])
  accounts         Account[]
  sessions         Session[]
  logins           Login[]
  notifications    Notification[]
  messagesReceived Message[]      @relation("ReceivedMessages")
  messagesSent     Message[]      @relation("SentMessages")
  tasks            Task[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model Login {
  id         Int      @id @default(autoincrement())
  user_id    String
  login_time DateTime @default(now())
  ip_address String
  device     String?
  location   String?
  user       User     @relation(fields: [user_id], references: [id])
}

model Notification {
  id         Int      @id @default(autoincrement())
  user_id    String
  title      String
  content    String
  read       Boolean  @default(false)
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])
}

model Message {
  id          Int      @id @default(autoincrement())
  sender_id   String
  receiver_id String
  content     String
  read        Boolean  @default(false)
  created_at  DateTime @default(now())
  sender      User     @relation("SentMessages", fields: [sender_id], references: [id])
  receiver    User     @relation("ReceivedMessages", fields: [receiver_id], references: [id])
}

model Task {
  id          Int       @id @default(autoincrement())
  user_id     String
  title       String
  description String?
  status      String // pending, in_progress, completed
  due_date    DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [user_id], references: [id])
}

//==================== STRUCTURE ACADÉMIQUE ====================//
model AcademicYear {
  id         Int       @id @default(autoincrement())
  year       String    @unique // ex: "2023-2024"
  start_date DateTime  @map("start_date")
  end_date   DateTime  @map("end_date")
  is_current Boolean   @default(false)
  created_at DateTime  @default(now()) @map("created_at")
  updated_at DateTime  @updatedAt @map("updated_at")
  deleted_at DateTime? @map("deleted_at") // Soft delete

  // Relations
  semesters   Semester[]
  enrollments Enrollment[]
  fees        TuitionFeeStructure[]

  @@map("academic_years")
}

model Semester {
  id               Int          @id @default(autoincrement())
  academic_year_id Int
  name             String
  start_date       DateTime
  end_date         DateTime
  is_current       Boolean      @default(false)
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  academicYear     AcademicYear @relation(fields: [academic_year_id], references: [id])
  grades           Grade[]
  Course           Course[]
}

model Department {
  id          Int                 @id @default(autoincrement())
  name        String              @unique
  code        String              @unique
  type        String // academic, administrative, service
  description String?
  created_at  DateTime            @default(now())
  updated_at  DateTime            @updatedAt
  staff       Staff[]
  courses     Course[]
  programs    Program[]
  subjects    SubjectDepartment[]
}

model Program {
  id            Int          @id @default(autoincrement())
  name          String
  code          String       @unique
  department_id Int
  duration      Int // Durée en années
  description   String?
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  department    Department   @relation(fields: [department_id], references: [id])
  levels        LevelStudy[]
}

model LevelStudy {
  id          Int       @id @default(autoincrement())
  program_id  Int
  level       Int // ex: 1 pour première année
  designation String // ex: "Licence 1"
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  program     Program   @relation(fields: [program_id], references: [id])
  classes     Class[]
  students    Student[]
}

//==================== GESTION DU PERSONNEL ====================//
model Staff {
  id            Int       @id @default(autoincrement())
  matricule     String    @unique
  first_name    String
  last_name     String
  dob           DateTime
  gender        String
  address       String
  phone         String
  email         String    @unique
  staff_type_id Int
  department_id Int?
  position_id   Int
  contract_id   Int
  hire_date     DateTime
  end_date      DateTime?
  is_active     Boolean   @default(true)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  staffType  StaffType    @relation(fields: [staff_type_id], references: [id])
  department Department?  @relation(fields: [department_id], references: [id])
  position   Position     @relation(fields: [position_id], references: [id])
  contract   ContractType @relation(fields: [contract_id], references: [id])

  teachingCourses TeacherCourse[]
  schedules       Schedule[]
  salary          StaffSalary?
  attendances     StaffAttendance[]
  salaryPayments  SalaryPayment[]
  leaves          Leave[]
  qualifications  Qualification[]
}

model Position {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  staff       Staff[]
}

model StaffType {
  id          Int      @id @default(autoincrement())
  name        String   @unique // teaching, administrative, support, etc.
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  staff       Staff[]
}

model SalaryScale {
  id            Int           @id @default(autoincrement())
  grade         String // Niveau/Grade (ex: A1, A2, B1)
  base_salary   Decimal       @db.Decimal(10, 2)
  hourly_rate   Decimal       @db.Decimal(10, 2)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  staffSalaries StaffSalary[]
}

model StaffSalary {
  id              Int         @id @default(autoincrement())
  staff_id        Int         @unique
  salary_scale_id Int
  base_salary     Decimal     @db.Decimal(10, 2)
  allowances      Json? // Primes et indemnités
  start_date      DateTime
  end_date        DateTime?
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  staff           Staff       @relation(fields: [staff_id], references: [id])
  salaryScale     SalaryScale @relation(fields: [salary_scale_id], references: [id])
}

model SalaryPayment {
  id             Int       @id @default(autoincrement())
  staff_id       Int
  month          Int
  year           Int
  base_amount    Decimal   @db.Decimal(10, 2)
  bonuses        Json? // Bonus du mois
  deductions     Json? // Retenues
  total_amount   Decimal   @db.Decimal(10, 2)
  payment_date   DateTime?
  payment_method String?
  status         String // pending, paid, cancelled
  reference      String? // Référence du paiement
  created_at     DateTime  @default(now())
  staff          Staff     @relation(fields: [staff_id], references: [id])
}

model ContractType {
  id          Int      @id @default(autoincrement())
  name        String   @unique // CDI, CDD, Vacation
  description String?
  duration    Int? // Durée en mois (null pour CDI)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  staff       Staff[]
}

model Qualification {
  id          Int      @id @default(autoincrement())
  staff_id    Int
  title       String
  institution String
  year        Int
  document    String? // URL du document
  created_at  DateTime @default(now())
  staff       Staff    @relation(fields: [staff_id], references: [id])
}

model Leave {
  id         Int      @id @default(autoincrement())
  staff_id   Int
  type       String // Type de congé
  start_date DateTime
  end_date   DateTime
  status     String // pending, approved, rejected
  reason     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  staff      Staff    @relation(fields: [staff_id], references: [id])
}

//==================== COURS ET CLASSES ====================//
model Course {
  id                    Int                     @id @default(autoincrement())
  code                  String                  @unique @db.VarChar(20)
  name                  String                  @db.VarChar(100)
  description           String?                 @db.VarChar(500)
  credits               Int                     @db.Integer
  subject_id            Int
  status                String // active, archived
  semester_id           Int
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  subject               Department              @relation(fields: [subject_id], references: [id])
  semester              Semester                @relation(fields: [semester_id], references: [id])
  prerequisites         CoursePrerequisite[]    @relation("PrerequisiteToCourse")
  requiredFor           CoursePrerequisite[]    @relation("CourseToPrerequisite")
  teachers              TeacherCourse[]
  classes               Class[]
  materials             CourseMaterial[]
  versions              CourseVersion[]
  sourceEquivalences    CourseEquivalence[]     @relation("SourceCourse")
  targetEquivalences    CourseEquivalence[]     @relation("TargetCourse")
  groupMemberships      CourseGroupMembership[]
  enrollmentConstraints EnrollmentConstraint[]
}

model Subject {
  id          Int                 @id @default(autoincrement())
  code        String              @unique @db.VarChar(20)
  name        String              @unique @db.VarChar(100)
  description String?             @db.VarChar(500)
  created_at  DateTime            @default(now())
  updated_at  DateTime            @updatedAt
  departments SubjectDepartment[]
}

model SubjectDepartment {
  id            Int        @id @default(autoincrement())
  subject_id    Int
  department_id Int
  Subject       Subject    @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  department    Department @relation(fields: [department_id], references: [id], onDelete: Cascade)

  @@unique([subject_id, department_id])
}

// Nouveau modèle pour les versions de cours
model CourseVersion {
  id             Int      @id @default(autoincrement())
  course_id      Int
  version        String
  changes        String
  effective_date DateTime
  created_at     DateTime @default(now())
  course         Course   @relation(fields: [course_id], references: [id])
}

// Nouveau modèle pour les équivalences de cours
model CourseEquivalence {
  id               Int      @id @default(autoincrement())
  source_course_id Int
  target_course_id Int
  equivalence_type String   @db.VarChar(20) // 'full' ou 'partial'
  notes            String?
  created_at       DateTime @default(now())
  sourceCourse     Course   @relation("SourceCourse", fields: [source_course_id], references: [id])
  targetCourse     Course   @relation("TargetCourse", fields: [target_course_id], references: [id])
}

// Nouveau modèle pour les groupes de cours
model CourseGroup {
  id          Int                     @id @default(autoincrement())
  name        String
  description String?
  created_at  DateTime                @default(now())
  updated_at  DateTime                @updatedAt
  courses     CourseGroupMembership[]
}

model CourseGroupMembership {
  course_id  Int
  group_id   Int
  created_at DateTime    @default(now())
  course     Course      @relation(fields: [course_id], references: [id])
  group      CourseGroup @relation(fields: [group_id], references: [id])

  @@id([course_id, group_id])
}

// Nouveau modèle pour les contraintes d'inscription
model EnrollmentConstraint {
  id                            Int              @id @default(autoincrement())
  course_id                     Int
  min_grade                     Float?
  min_credits                   Int?
  max_students                  Int?
  prerequisites_validation_rule String?          @db.VarChar(20) // 'all' ou 'any'
  created_at                    DateTime         @default(now())
  updated_at                    DateTime         @updatedAt
  course                        Course           @relation(fields: [course_id], references: [id])
  required_courses              RequiredCourse[]
}

model RequiredCourse {
  constraint_id Int
  course_id     Int
  created_at    DateTime             @default(now())
  constraint    EnrollmentConstraint @relation(fields: [constraint_id], references: [id])

  @@id([constraint_id, course_id])
}

model CoursePrerequisite {
  course_id       Int
  prerequisite_id Int
  course          Course @relation("PrerequisiteToCourse", fields: [course_id], references: [id])
  prerequisite    Course @relation("CourseToPrerequisite", fields: [prerequisite_id], references: [id])

  @@id([course_id, prerequisite_id])
}

model TeacherCourse {
  staff_id  Int
  course_id Int
  staff     Staff  @relation(fields: [staff_id], references: [id])
  course    Course @relation(fields: [course_id], references: [id])

  @@id([staff_id, course_id])
}

model CourseMaterial {
  id         Int      @id @default(autoincrement())
  course_id  Int
  title      String
  type       String // document, video, etc.
  url        String
  created_at DateTime @default(now())
  course     Course   @relation(fields: [course_id], references: [id])
}

model Class {
  id            Int          @id @default(autoincrement())
  course_id     Int
  level_id      Int
  academic_year String
  capacity      Int
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  course        Course       @relation(fields: [course_id], references: [id])
  level         LevelStudy   @relation(fields: [level_id], references: [id])
  schedules     Schedule[]
  enrollments   Enrollment[]
}

//==================== ÉTUDIANTS ====================//
model Student {
  id                Int           @id @default(autoincrement())
  matricule         String        @unique
  first_name        String
  last_name         String
  dob               DateTime
  pob               String // Place of birth
  gender            Gender
  nationality       String // Ajout important
  address           String
  phone             String
  email             String        @unique
  level_id          Int
  status            StudentStatus @default(ACTIVE)
  avatar            String?
  blood_group       String? // Informations médicales importantes
  emergency_contact String? // Contact d'urgence
  created_at        DateTime      @default(now()) @map("created_at")
  updated_at        DateTime      @updatedAt @map("updated_at")
  deleted_at        DateTime?     @map("deleted_at") // Soft delete

  // Relations
  level          LevelStudy            @relation(fields: [level_id], references: [id])
  parents        ParentStudent[]
  enrollments    Enrollment[]
  fees           TuitionPayment[]
  attendances    StudentAttendance[]
  documents      StudentDocument[] // Nouveau - pour les documents des étudiants
  health_records StudentHealthRecord[] // Nouveau - pour les dossiers médicaux

  @@map("students")
}

// Nouveau modèle pour les documents des étudiants
model StudentDocument {
  id          Int       @id @default(autoincrement())
  student_id  Int
  type        String // passport, birth_certificate, previous_diploma, etc.
  file_url    String
  is_verified Boolean   @default(false)
  uploaded_at DateTime  @default(now())
  verified_at DateTime?
  expires_at  DateTime?

  student Student @relation(fields: [student_id], references: [id])

  @@map("student_documents")
}

// Nouveau modèle pour les dossiers médicaux
model StudentHealthRecord {
  id          Int      @id @default(autoincrement())
  student_id  Int
  condition   String? // Conditions médicales
  allergies   String?
  medications String?
  notes       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  student Student @relation(fields: [student_id], references: [id])

  @@map("student_health_records")
}

model ParentStudent {
  id           Int      @id @default(autoincrement())
  student_id   Int
  first_name   String
  last_name    String
  relationship String // father, mother, guardian
  phone        String
  email        String?
  address      String
  occupation   String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  student      Student  @relation(fields: [student_id], references: [id])
}

model Enrollment {
  id               Int          @id @default(autoincrement())
  student_id       Int
  class_id         Int
  academic_year_id Int
  status           String // enrolled, dropped, completed
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  student          Student      @relation(fields: [student_id], references: [id])
  class            Class        @relation(fields: [class_id], references: [id])
  academicYear     AcademicYear @relation(fields: [academic_year_id], references: [id])
  grade            Grade?
}

model Grade {
  id            Int        @id @default(autoincrement())
  enrollment_id Int        @unique
  semester_id   Int
  marks         Json // Différentes composantes de la note
  final_grade   Float
  status        String // passed, failed
  remarks       String?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  enrollment    Enrollment @relation(fields: [enrollment_id], references: [id])
  semester      Semester   @relation(fields: [semester_id], references: [id])
}

//==================== GESTION DU TEMPS ====================//
model Schedule {
  id         Int      @id @default(autoincrement())
  class_id   Int
  staff_id   Int
  day        String // Jour de la semaine
  start_time DateTime
  end_time   DateTime
  room       String
  recurring  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  class      Class    @relation(fields: [class_id], references: [id])
  staff      Staff    @relation(fields: [staff_id], references: [id])
}

//==================== PRÉSENCES ====================//
model StaffAttendance {
  id         Int       @id @default(autoincrement())
  staff_id   Int
  date       DateTime
  status     String // present, absent, late
  check_in   DateTime?
  check_out  DateTime?
  reason     String?
  created_at DateTime  @default(now())
  staff      Staff     @relation(fields: [staff_id], references: [id])
}

model StudentAttendance {
  id         Int      @id @default(autoincrement())
  student_id Int
  date       DateTime
  status     String // present, absent, late
  reason     String?
  created_at DateTime @default(now())
  student    Student  @relation(fields: [student_id], references: [id])
}

//==================== FINANCES ====================//
model TuitionFeeStructure {
  id               Int              @id @default(autoincrement())
  academic_year_id Int
  program_level    Int // Niveau d'études
  amount           Decimal          @db.Decimal(10, 2)
  due_date         DateTime
  description      String?
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  academicYear     AcademicYear     @relation(fields: [academic_year_id], references: [id])
  payments         TuitionPayment[]
}

model TuitionPayment {
  id                    Int                 @id @default(autoincrement())
  student_id            Int
  fee_structure_id      Int
  amount_paid           Decimal             @db.Decimal(10, 2)
  payment_date          DateTime
  payment_method        String // cash, bank_transfer, mobile_money
  transaction_reference String?
  receipt_number        String              @unique
  status                String // pending, completed, failed
  notes                 String?
  created_at            DateTime            @default(now())
  updated_at            DateTime            @updatedAt
  student               Student             @relation(fields: [student_id], references: [id])
  feeStructure          TuitionFeeStructure @relation(fields: [fee_structure_id], references: [id])
}

//==================== PARAMÈTRES SYSTÈME ====================//
model SystemSettings {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  type        String // string, number, boolean, json
  category    String // academic, financial, general
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  user_id     Int? // Peut être null pour les actions système
  action      String // create, update, delete
  entity_type String // nom de la table affectée
  entity_id   Int // ID de l'enregistrement affecté
  old_values  Json? // Anciennes valeurs en cas de modification
  new_values  Json? // Nouvelles valeurs
  ip_address  String?
  user_agent  String?
  created_at  DateTime @default(now())
}

//==================== COMMUNICATION ====================//
model Announcement {
  id         Int       @id @default(autoincrement())
  title      String
  content    String
  type       String // general, academic, administrative
  start_date DateTime
  end_date   DateTime?
  is_active  Boolean   @default(true)
  created_by Int // User ID
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Document {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  file_url    String
  file_type   String // pdf, doc, xls, etc.
  category    String // academic, administrative, financial
  is_public   Boolean  @default(false)
  uploaded_by Int // User ID
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

//==================== ÉVÉNEMENTS ====================//
model Event {
  id           Int      @id @default(autoincrement())
  title        String
  description  String?
  start_date   DateTime
  end_date     DateTime
  location     String?
  type         String // academic, social, administrative
  status       String // planned, ongoing, completed, cancelled
  organizer    String?
  max_capacity Int?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

//==================== BIBLIOTHÈQUE ====================//
model Book {
  id               Int             @id @default(autoincrement())
  title            String
  author           String
  isbn             String?         @unique
  publisher        String?
  publication_year Int?
  category         String
  location         String // Emplacement physique dans la bibliothèque
  status           String // available, borrowed, maintenance
  total_copies     Int
  available_copies Int
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  borrowings       BookBorrowing[]
}

model BookBorrowing {
  id          Int       @id @default(autoincrement())
  book_id     Int
  student_id  Int? // Pour les emprunts par les étudiants
  staff_id    Int? // Pour les emprunts par le personnel
  borrow_date DateTime
  due_date    DateTime
  return_date DateTime?
  status      String // active, returned, overdue
  notes       String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  book        Book      @relation(fields: [book_id], references: [id])
}
