// Définir PostgreSQL comme fournisseur de base de données
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Cette variable changera pour chaque école
}

generator client {
  provider = "prisma-client-js"
}

// 1. Modèle pour les permissions (indépendant)
model Permission {
  id          Int              @id @default(autoincrement())
  code        Int              @unique
  name        String           @unique // Nom de la permission (ex. : 'create_student', 'view_grades')
  description String?
  role        RolePermission[]
}

// 2. Modèle pour les rôles (indépendant, lié à Permission)
model Role {
  id              Int               @id @default(autoincrement())
  name            String            @unique // Nom du rôle
  description     String?
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  users           User[]
  permission      RolePermission[]
  RoleDailySalary RoleDailySalary[]
  Staff           Staff[]
}

// 3. Modèle pour la relation entre Rôle et Permission (table de liaison)
model RolePermission {
  role_id       Int
  permission_id Int
  role          Role       @relation(fields: [role_id], references: [id])
  permissions   Permission @relation(fields: [permission_id], references: [id])

  @@id([role_id, permission_id]) // Composite primary key
}

// 4. Modèle pour les plans d'abonnement (indépendant)
model SubscriptionPlan {
  id          Int      @id @default(autoincrement())
  name        String
  price       Decimal  @db.Decimal(10, 2)
  description String?
  schools     School[]
}

// 5. Modèle pour les écoles (lié à SubscriptionPlan)
model School {
  id                Int              @id @default(autoincrement())
  name              String
  address           String
  contact_phone     String
  contact_email     String
  domain            String           @unique // Sous-domaine pour le tenant
  subscription_plan Int
  subscriptionPlan  SubscriptionPlan @relation(fields: [subscription_plan], references: [id])
}

// 6. Modèle pour les utilisateurs (lié à Role et School)
model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  first_name       String
  last_name        String
  password         String
  role_id          Int
  related_id       Int       // Référence à l'école
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  logins           Login[]   @relation("UserLogins")
  messagesReceived Message[] @relation("ReceivedMessages")
  role             Role      @relation(fields: [role_id], references: [id])
}

// 7. Modèle pour les connexions (lié à User)
model Login {
  id         Int      @id @default(autoincrement())
  user_id    Int
  login_time DateTime
  ip_address String
  user       User     @relation("UserLogins", fields: [user_id], references: [id])
}

// 8. Modèle pour les départements (indépendant)
model Department {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  staff       Staff[]
  courses     Course[]
  Teacher     Teacher[]
}

// 9. Modèle pour les niveaux d'études (indépendant)
model LevelStudy {
  id          Int       @id @default(autoincrement())
  designation String    @unique
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  classes     Class[]
  students    Student[]
}

// 10 Model pour les cours (lié à Department)
model Course {
  id            Int        @id @default(autoincrement())
  name          String
  description   String?
  credits       Int
  department_id Int
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  department    Department @relation(fields: [department_id], references: [id])
  classes       Class[]
  grades        Grade[]
  schedules     Schedule[]
}

// 11. Modèle pour les types de contrat (indépendant)
model ContractType {
  id          Int      @id @default(autoincrement())
  libelle     String   @unique
  description String?
  duration    Int?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  Staff       Staff[]
}

// 12. Modèle pour le personnel (lié à Department, ContractType, Role)
model Staff {
  id              Int               @id @default(autoincrement())
  matricule       String            @unique
  first_name      String
  last_name       String
  dob             DateTime
  gender          String
  address         String
  phone           String
  email           String
  role_id         Int
  contract_id     Int
  hire_at         DateTime
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  role            Role              @relation(fields: [role_id], references: [id])
  contract        ContractType      @relation(fields: [contract_id], references: [id])
  Department      Department?       @relation(fields: [departmentId], references: [id])
  departmentId    Int?
  messagesSent    Message[]         @relation("SentMessages")
  staffAttendance StaffAttendance[]
  salaries        Salary[]
  schedules       Schedule[]
  Teacher         Teacher[]
  Class           Class[]
}

// 13. Modèle Teacher pour le personnel enseignant (lié à Staff, Department, Class)
model Teacher {
  id            Int        @id @default(autoincrement())
  department_id Int
  staff_id      Int
  department    Department @relation(fields: [department_id], references: [id])
  staff         Staff      @relation(fields: [staff_id], references: [id])
  classes       Class[]
}

// 14. Modèle pour les classes (lié à LevelStudy, Course, Staff)
model Class {
  id            Int        @id @default(autoincrement())
  name          String
  levelStudy_id Int
  course_id     Int
  teacher_id    Int
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  levelStudy    LevelStudy @relation(fields: [levelStudy_id], references: [id])
  course        Course     @relation(fields: [course_id], references: [id])
  teacher       Staff      @relation(fields: [teacher_id], references: [id])
  schedules     Schedule[]
  Teacher       Teacher?   @relation(fields: [teacherId], references: [id])
  teacherId     Int?
}

// 15. Modèle pour les étudiants (lié à LevelStudy)
model Student {
  id             Int                         @id @default(autoincrement())
  matricule      String                      @unique
  first_name     String
  last_name      String
  dob            DateTime
  pob            String
  gender         String
  address        String
  phone          String
  email          String
  levelStudy_id  Int
  picture        String?
  created_at     DateTime                    @default(now())
  updated_at     DateTime                    @updatedAt
  levelStudy     LevelStudy                  @relation(fields: [levelStudy_id], references: [id])
  grades         Grade[]
  tuitionFees    TuitionFee[]
  parentStudents ParentStudentRelationship[]
}

// 16. Modèle pour les notes (lié à Student, Course)
model Grade {
  id            Int      @id @default(autoincrement())
  student_id    Int
  course_id     Int
  grade         Int
  observation   String
  semester      Int
  academic_year String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  student       Student  @relation(fields: [student_id], references: [id])
  course        Course   @relation(fields: [course_id], references: [id])
}

// 17. Modèle pour les messages (lié à Staff, User)
model Message {
  id          Int      @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  message     String
  timestamp   DateTime @default(now())
  file        String?
  sender      Staff    @relation("SentMessages", fields: [sender_id], references: [id])
  receiver    User     @relation("ReceivedMessages", fields: [receiver_id], references: [id])
}

// 18. Modèle pour les parents (indépendant)
model Parent {
  id             Int                         @id @default(autoincrement())
  name           String
  phone          String
  email          String
  created_at     DateTime                    @default(now())
  updated_at     DateTime                    @updatedAt
  parentStudents ParentStudentRelationship[]
}

// 19. Modèle pour la relation parent-élève (lié à Student, Parent)
model ParentStudentRelationship {
  id         Int     @id @default(autoincrement())
  student_id Int
  parent_id  Int
  student    Student @relation(fields: [student_id], references: [id])
  parent     Parent  @relation(fields: [parent_id], references: [id])
}

// 20. Modèle pour les événements (indépendant)
model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  duration    Int?     @default(1)
  location    String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

// 21. Modèle pour les fournitures (indépendant)
model Supply {
  id            Int      @id @default(autoincrement())
  name          String
  quantity      Int
  description   String?
  purchase_date DateTime
  cost          Decimal  @db.Decimal(10, 2)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

// 22. Modèle pour les emplois du temps (lié à Class, Course, Staff)
model Schedule {
  id         Int      @id @default(autoincrement())
  class_id   Int
  course_id  Int
  teacher_id Int
  dayOfWeek  String
  startTime  DateTime
  endTime    DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  class      Class    @relation(fields: [class_id], references: [id])
  course     Course   @relation(fields: [course_id], references: [id])
  teacher    Staff    @relation(fields: [teacher_id], references: [id])
}

// 23. Modèle pour l'assiduité du personnel (lié à Staff)
model StaffAttendance {
  id         Int      @id @default(autoincrement())
  staff_id   Int
  date       DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  staff      Staff    @relation(fields: [staff_id], references: [id])
}

// 24. Modèle pour les salaires du personnel (lié à Staff)
model Salary {
  id         Int      @id @default(autoincrement())
  staff_id   Int
  amount     Decimal  @db.Decimal(10, 2)
  month      String
  year       Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  staff      Staff    @relation(fields: [staff_id], references: [id])
}

// 25. Modèle pour les salaires journalier du personnel en fonction du rôle (lié à Role)
model RoleDailySalary {
  id           Int      @id @default(autoincrement())
  role_id      Int
  daily_salary Decimal  @db.Decimal(10, 2)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  role         Role     @relation(fields: [role_id], references: [id])
}

// 26. Modèle pour les frais de scolarité (lié à Student)
model TuitionFee {
  id           Int      @id @default(autoincrement())
  student_id   Int
  amount       Decimal  @db.Decimal(10, 2)
  payment_date DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  student      Student  @relation(fields: [student_id], references: [id])
}

// 27. Modèle pour les tâches (lié à User)
model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  repeat      Int?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}
